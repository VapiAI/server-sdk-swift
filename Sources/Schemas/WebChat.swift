import Foundation

public struct WebChat: Codable, Hashable, Sendable {
    /// This is the unique identifier for the chat.
    public let id: String
    /// This is the ID of the session for the chat. Send it in the next chat request to continue the conversation.
    public let sessionId: String?
    /// This is the output messages generated by the system in response to the input.
    public let output: [WebChatOutputItem]
    /// Additional properties that are not explicitly defined in the schema
    public let additionalProperties: [String: JSONValue]

    public init(
        id: String,
        sessionId: String? = nil,
        output: [WebChatOutputItem],
        additionalProperties: [String: JSONValue] = .init()
    ) {
        self.id = id
        self.sessionId = sessionId
        self.output = output
        self.additionalProperties = additionalProperties
    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)
        self.id = try container.decode(String.self, forKey: .id)
        self.sessionId = try container.decodeIfPresent(String.self, forKey: .sessionId)
        self.output = try container.decode([WebChatOutputItem].self, forKey: .output)
        self.additionalProperties = try decoder.decodeAdditionalProperties(using: CodingKeys.self)
    }

    public func encode(to encoder: Encoder) throws -> Void {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try encoder.encodeAdditionalProperties(self.additionalProperties)
        try container.encode(self.id, forKey: .id)
        try container.encodeIfPresent(self.sessionId, forKey: .sessionId)
        try container.encode(self.output, forKey: .output)
    }

    /// Keys for encoding/decoding struct properties.
    enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case sessionId
        case output
    }
}