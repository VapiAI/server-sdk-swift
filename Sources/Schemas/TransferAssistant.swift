import Foundation

public struct TransferAssistant: Codable, Hashable, Sendable {
    /// Optional name for the transfer assistant
    public let name: String?
    /// Model configuration for the transfer assistant
    public let model: TransferAssistantModel
    /// This is the first message that the transfer assistant will say.
    /// This can also be a URL to a custom audio file.
    /// 
    /// If unspecified, assistant will wait for user to speak and use the model to respond once they speak.
    public let firstMessage: String?
    /// This is the mode for the first message. Default is 'assistant-speaks-first'.
    /// 
    /// Use:
    /// - 'assistant-speaks-first' to have the assistant speak first.
    /// - 'assistant-waits-for-user' to have the assistant wait for the user to speak first.
    /// - 'assistant-speaks-first-with-model-generated-message' to have the assistant speak first with a message generated by the model based on the conversation state.
    /// 
    /// @default 'assistant-speaks-first'
    public let firstMessageMode: TransferAssistantFirstMessageMode?
    /// This is the maximum duration in seconds for the transfer assistant conversation.
    /// After this time, the transfer will be cancelled automatically.
    /// @default 120
    public let maxDurationSeconds: Double?
    /// This is the number of seconds of silence to wait before ending the call. Defaults to 30.
    /// 
    /// @default 30
    public let silenceTimeoutSeconds: Double?
    /// Additional properties that are not explicitly defined in the schema
    public let additionalProperties: [String: JSONValue]

    public init(
        name: String? = nil,
        model: TransferAssistantModel,
        firstMessage: String? = nil,
        firstMessageMode: TransferAssistantFirstMessageMode? = nil,
        maxDurationSeconds: Double? = nil,
        silenceTimeoutSeconds: Double? = nil,
        additionalProperties: [String: JSONValue] = .init()
    ) {
        self.name = name
        self.model = model
        self.firstMessage = firstMessage
        self.firstMessageMode = firstMessageMode
        self.maxDurationSeconds = maxDurationSeconds
        self.silenceTimeoutSeconds = silenceTimeoutSeconds
        self.additionalProperties = additionalProperties
    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)
        self.name = try container.decodeIfPresent(String.self, forKey: .name)
        self.model = try container.decode(TransferAssistantModel.self, forKey: .model)
        self.firstMessage = try container.decodeIfPresent(String.self, forKey: .firstMessage)
        self.firstMessageMode = try container.decodeIfPresent(TransferAssistantFirstMessageMode.self, forKey: .firstMessageMode)
        self.maxDurationSeconds = try container.decodeIfPresent(Double.self, forKey: .maxDurationSeconds)
        self.silenceTimeoutSeconds = try container.decodeIfPresent(Double.self, forKey: .silenceTimeoutSeconds)
        self.additionalProperties = try decoder.decodeAdditionalProperties(using: CodingKeys.self)
    }

    public func encode(to encoder: Encoder) throws -> Void {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try encoder.encodeAdditionalProperties(self.additionalProperties)
        try container.encodeIfPresent(self.name, forKey: .name)
        try container.encode(self.model, forKey: .model)
        try container.encodeIfPresent(self.firstMessage, forKey: .firstMessage)
        try container.encodeIfPresent(self.firstMessageMode, forKey: .firstMessageMode)
        try container.encodeIfPresent(self.maxDurationSeconds, forKey: .maxDurationSeconds)
        try container.encodeIfPresent(self.silenceTimeoutSeconds, forKey: .silenceTimeoutSeconds)
    }

    /// Keys for encoding/decoding struct properties.
    enum CodingKeys: String, CodingKey, CaseIterable {
        case name
        case model
        case firstMessage
        case firstMessageMode
        case maxDurationSeconds
        case silenceTimeoutSeconds
    }
}